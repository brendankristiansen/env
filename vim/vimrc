"--------------------------------------------------------------
" Maintainer: David Millman dave@cs.unc.edu
"--------------------------------------------------------------

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins managed by Vundle
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()

" let Vundle manage Vundle, required
Plugin 'gmarik/vundle'

" colorschemes
Plugin 'fugalh/desert.vim'

" navigation plugins
Plugin 'kien/ctrlp.vim'
Plugin 'bling/vim-bufferline'
Plugin 'rbgrouleff/bclose.vim'

" other plugins
Plugin 'scrooloose/syntastic'
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'Valloric/YouCompleteMe'
Plugin 'Raimondi/delimitMate'
Plugin 'jamessan/vim-gnupg'
Plugin 'tpope/vim-fugitive'
Plugin 'easymotion/vim-easymotion'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'bronson/vim-visual-star-search'

" markdown plugins
Plugin 'tpope/vim-markdown'

" python plugins
Plugin 'hynek/vim-python-pep8-indent'
Plugin 'tmhedberg/SimpylFold'

" javascript plugins
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'marijnh/tern_for_vim'
" ruby plugins
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rails'
Plugin 'ngmy/vim-rubocop'

autocmd BufWritePre * FixWhitespace

"-- some nice global variables
let g:default_text_width=80
let g:default_tabwidth=4

"-- 1 important
"-- 2 moving around, searching and patterns
set ignorecase          " ignore case when searching
set smartcase           " override ignorecase when patter has upper case chars
set incsearch           " show matches as search is typed
set hlsearch            " highlight matches of last search pattern
set magic               " make backshash in regex more predictable

"-- 3 tags
"-- 4 displaying text
set relativenumber      " display line numbers relative to cursor
set number              " display line numbers
set scrolloff=7         " number of padding lines when vertical scrolling
set cmdheight=1         " number of lines in the commandbar
set wrap                " wrap long lines
set linebreak           " wrap long lines at 'breakat' characters

"-- 5 syntax, highlighting and spelling
filetype plugin indent on " Enable filetype based plugins and indentation rules
syntax on               " Enable syntax highlighing
set background=dark     " background color brightness
colorscheme desert
highlight ColorColumn ctermbg=235 guibg=#2c2d27
execute "set colorcolumn=" . join(range(default_text_width,335), ',')

"-- 6 multiple windows
set hidden      " allow opening new buffers without writing the current buffer

"-- 7 multiple tab pages
"-- 8 terminal
set t_Co=256

"-- 9 using the mouse
set mouse=a		" enable mouse usage (all modes)

"-- 10 GUI
"set guifont=Monaco:h12  " font used in gui
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h12
set guioptions-=T       " remove the toolbar from the gui
if has("gui_running")
    set transparency=1  " transparancy of the background (as a precent)
endif

"-- 11 printing
"-- 12 messages and info
set showcmd	        " show (partial) command in status line.

"-- 13 selecting text
set clipboard=unnamed  " Setting allows vim to interact with system clipboard

"-- 14 editing text
set backspace=eol,start,indent   " Set backspace functionality in insert mode
set showmatch                    " when inserting bracket, short jump to  match
set matchtime=2                  " tenth of a second to show match for 'showmatch'
let &textwidth=default_text_width " line length above with to wrap a line.

"-- 15 tabs and indenting
set expandtab                       " In insert mode, expand <Tab> to spaces
let &shiftwidth=default_tabwidth    " number of spaces in each steop of (auto)indent
let &softtabstop=default_tabwidth   " number of spaces to remove when deleting insert mode
let &tabstop=default_tabwidth       " number of spaces a <Tab> in the text stands for
set smarttab                        " On an indent, <Tab> inserts 'shiftwidth' num spaces
set autoindent                      " automatically set indent of a new line
set smartindent                     " use smart indenting (good for c-like language)

"-- 16 folding
set foldlevelstart=99   " don't fold when entering a file
set foldmethod=syntax   " use syntax forlding by default
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>

"-- 17 diff mode
"-- 18 mapping
"-- 19 reading and writing files
set fileformats=unix,dos,mac    " file formats to consider when editing a file
set autoread            " auto reread files changed externally
set autowrite           " auto save when leaving a modified buffer
set nobackup            " do not keep backup after overwriting a file
set nowritebackup       " do not write backup after overwriting a file

"-- 20 the swap file
set noswapfile          " do not keep a swap file

"-- 21 command line editing
set undodir=~/.vim_runtime/undodir " directory for undo files
set undofile            " automatically save and restore undo history
set history=700         " number of lines of history that vim remembers
set wildmenu            " command-line completion shows a list of matches

" Bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

"-- 22 executing external commands
set shell=/bin/bash

"-- 23 running make and jumping to errors (cope)
map <leader>cc :botright cope<cr>
map <leader>n :cn<cr>
map <leader>p :cp<cr>
map <leader>make :make<cr>

"-- 24 language specific

" git
let g:git_text_width=72
au FileType gitcommit let &textwidth=git_text_width
au FileType gitcommit let &colorcolumn=git_text_width

" python
autocmd FileType python inoremap # X#
autocmd FileType python setlocal completeopt-=preview
iab xipdb import ipdb; ipdb.set_trace()
iab xpdb import pdb; pdb.set_trace()
iab xpep8ify Pep8ify

" ruby
let g:ruby_tabwidth=2
let &shiftwidth=ruby_tabwidth
let &softtabstop=ruby_tabwidth
let &tabstop=ruby_tabwidth
iab xrdb binding.pry

" markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd FileType markdown set spell

" javascript
iab xcl console.log

" makefiles
autocmd FileType make set noexpandtab

" html
autocmd FileType html set spell

" latex
autocmd FileType tex set spell
autocmd FileType tex set linebreak
autocmd FileType tex set display+=lastline

"-- 25 multi-byte characters
set encoding=utf-8

"-- 26 various
" jump to the last position when reopening a file
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"-------------------------------------------------------------------------------
" Keybord Shortcuts
"-------------------------------------------------------------------------------
let mapleader = ";"
imap ;; <Esc>
nmap <leader>w :w!<cr>
nmap <leader>wq :wq!<cr>
nmap <leader>e :e! ~/.vim/vimrc<cr>
map j gj
map k gk

" clean up the formatting of text
map qq gwap

" pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" When vimrc is edited, reload it
augroup reload_vimrc
  autocmd!
  autocmd bufwritepost ~/.vim/vimrc nested source ~/.vim/vimrc
augroup end

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" => Moving around, tabs and buffers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" buffers
map <C-u> :bp<cr>
map <C-i> :bn<cr>
" rbgrouleff/bclose.vim provides ':Bclose' and 'map <leader>bd :Bclose<cr>'

" Close all the buffers
map <leader>ba :1,300 bd!<cr>

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
" most status line is provided by powerline.
" All we have to do here is set some variables
" Always hide the statusline
set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Parenthesis/bracket expanding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" auto completion of (), [], and single and double quotes are provided by
" delimitMate plugin.  Shortcuts below are for highlighting some text and then
" wrapping the text in the delimiter
vnoremap <leader>$ <esc>`>a$<esc>`<i$<esc>
vnoremap <leader>( <esc>`>a)<esc>`<i(<esc>
vnoremap <leader>[ <esc>`>a]<esc>`<i[<esc>
vnoremap <leader>{ <esc>`>a}<esc>`<i{<esc>
vnoremap <leader>" <esc>`>a"<esc>`<i"<esc>
vnoremap <leader>' <esc>`>a'<esc>`<i'<esc>
vnoremap <leader>t <esc>`>a><esc>`<i<<esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Abbrevs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
iab xdate <c-r>=strftime("%Y-%m-%d")
iab xfn <c-r>=expand("%:t")

""""""""""""""""""""""""""""""
" => Vim grep
""""""""""""""""""""""""""""""
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn .git'
set grepprg=/bin/grep\ -nH

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => netrw settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:netrw_liststyle = 3  " by default open in tree view (hit i to change the view)
let g:netrw_list_hide = '.DS_Store, .localized'  " hide these files
let g:netrw_preview = 1 " use 'p' to open file on the right
